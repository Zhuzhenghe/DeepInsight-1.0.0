---
description: 
globs: 
alwaysApply: false
---
# Perplexica 开发工作流程和最佳实践

## 开发前准备

### 环境设置
1. **Node.js 版本**：确保使用 Node.js 18.x 或更高版本
2. **包管理器**：项目使用 Yarn，但也支持 npm
3. **IDE 配置**：推荐使用 VSCode 或 Cursor，并安装以下扩展：
   - ESLint
   - Prettier
   - Tailwind CSS IntelliSense
   - TypeScript 语言支持

### 必要的服务
- **SearxNG**：必须配置并运行 SearxNG 实例
- **Ollama**（可选）：如果使用本地模型，需要安装并运行 Ollama
- **API 密钥**：根据使用的模型提供商，配置相应的 API 密钥

## 核心功能开发指南

### 添加新的搜索模式

要添加新的搜索模式，需要修改以下文件：

1. **创建新的 Prompt**：在 [src/lib/prompts/](mdc:src/lib/prompts) 目录下创建新的提示模板
2. **更新搜索代理**：修改 [src/lib/search/metaSearchAgent.ts](mdc:src/lib/search/metaSearchAgent.ts)
3. **添加 UI 选项**：在 [src/components/MessageInputActions/Focus.tsx](mdc:src/components/MessageInputActions/Focus.tsx) 中添加新选项
4. **更新 API 路由**：在 [src/app/api/search/route.ts](mdc:src/app/api/search/route.ts) 中处理新模式

### 添加新的 LLM 提供商

1. **创建提供商文件**：在 [src/lib/providers/](mdc:src/lib/providers) 目录下创建新文件
2. **实现接口**：遵循现有提供商的模式，实现聊天和嵌入功能
3. **更新配置**：在 [sample.config.toml](mdc:sample.config.toml) 中添加配置模板
4. **注册提供商**：在 [src/lib/providers/index.ts](mdc:src/lib/providers/index.ts) 中注册

### 数据库操作

使用 Drizzle ORM 进行数据库操作：

```typescript
// 导入数据库和模式
import { db } from '@/lib/db';
import { chats, messages } from '@/lib/db/schema';

// 查询示例
const userChats = await db
  .select()
  .from(chats)
  .where(eq(chats.userId, userId));

// 插入示例
await db.insert(messages).values({
  chatId,
  content,
  role: 'user',
  timestamp: new Date()
});
```

## API 开发规范

### RESTful API 设计
- 使用标准 HTTP 方法：GET、POST、PUT、DELETE
- 返回适当的状态码：200（成功）、400（错误请求）、401（未授权）、500（服务器错误）
- 使用 JSON 格式进行数据交换

### 错误处理模式
```typescript
export async function POST(request: Request) {
  try {
    // 验证请求
    const body = await request.json();
    if (!body.query) {
      return NextResponse.json(
        { error: '缺少必需的查询参数' },
        { status: 400 }
      );
    }
    
    // 处理业务逻辑
    const result = await processQuery(body);
    
    return NextResponse.json(result);
  } catch (error) {
    console.error('API 错误:', error);
    return NextResponse.json(
      { error: '服务器内部错误' },
      { status: 500 }
    );
  }
}
```

## 前端开发最佳实践

### 组件结构
```typescript
interface ComponentProps {
  // 定义 props 类型
}

export const Component: React.FC<ComponentProps> = ({ props }) => {
  // 使用 hooks
  const [state, setState] = useState();
  
  // 副作用
  useEffect(() => {
    // 清理函数
    return () => {};
  }, [dependencies]);
  
  // 渲染
  return (
    <div className="tailwind-classes">
      {/* 组件内容 */}
    </div>
  );
};
```

### 状态管理
- 使用 React 的内置 hooks（useState、useReducer）管理局部状态
- 使用 Context API 管理全局状态
- 避免不必要的状态提升

### 性能优化
1. 使用 `React.memo` 优化纯组件
2. 使用 `useMemo` 和 `useCallback` 优化计算和函数
3. 实现虚拟滚动处理长列表
4. 使用 Next.js 的图片优化功能

## 测试策略

### 单元测试
- 测试工具函数和纯函数
- 测试 React 组件的渲染和交互
- 模拟外部依赖

### 集成测试
- 测试 API 端点
- 测试数据库操作
- 测试第三方服务集成

### E2E 测试
- 测试完整的用户流程
- 测试跨浏览器兼容性
- 测试响应式设计

## 调试技巧

### 前端调试
1. **React DevTools**：检查组件树和状态
2. **Network 面板**：监控 API 请求
3. **Console 日志**：添加有意义的日志信息
4. **Source Maps**：使用源映射调试 TypeScript 代码

### 后端调试
1. **日志记录**：使用 Winston 记录关键操作
2. **API 测试**：使用 Postman 或 Thunder Client
3. **数据库查询**：使用 Drizzle Studio 或 SQLite 浏览器
4. **性能分析**：使用 Next.js 的内置性能分析工具

## 部署检查清单

### 生产环境准备
- [ ] 更新 `config.toml` 中的生产配置
- [ ] 设置环境变量
- [ ] 优化数据库查询
- [ ] 启用错误跟踪（如 Sentry）
- [ ] 配置 CORS 和安全头
- [ ] 设置速率限制
- [ ] 配置备份策略

### Docker 部署
- [ ] 优化 Docker 镜像大小
- [ ] 配置健康检查
- [ ] 设置资源限制
- [ ] 配置日志管理
- [ ] 设置自动重启策略

## 常见陷阱和解决方案

### 1. 循环依赖
**问题**：模块之间相互导入导致循环依赖
**解决**：重构代码结构，使用依赖注入或事件系统

### 2. 内存泄漏
**问题**：未清理的事件监听器或定时器
**解决**：在组件卸载时清理所有副作用

### 3. 并发问题
**问题**：多个请求同时修改同一资源
**解决**：使用事务或乐观锁

### 4. 性能瓶颈
**问题**：大量数据处理导致响应缓慢
**解决**：实现分页、缓存和后台处理

## 维护指南

### 定期任务
1. **依赖更新**：每月检查并更新依赖
2. **安全审计**：运行 `npm audit` 检查漏洞
3. **性能监控**：定期检查应用性能指标
4. **日志清理**：定期清理旧日志文件
5. **数据库优化**：定期执行数据库维护

### 版本管理
- 遵循语义化版本控制（SemVer）
- 维护详细的变更日志
- 在重大更新前创建分支
- 使用 Git 标签标记发布版本

